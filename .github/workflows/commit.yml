name: Push docker images to Docker Hub from Feature branches.

on:
  push:
    branches:
      - feature/*/*

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Cache Docker images
      #   id: cache-docker
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.images.tar.gz
      #     key: docker-images-${{ runner.os }}-${{ hashFiles('./docker-compose.test.yml') }}

      # - name: Load Cached Docker Images.
      #   if: steps.cache-docker.outputs.cache-hit == 'true'
      #   working-directory: ci
      #   run: |
      #     chmod 700 load.sh
      #     ./load.sh

      - name: Saving Testing Firebase Keys
        run: |
          mkdir keys
          echo '${{ secrets.E2E_FIREBASE_KEY }}' >> keys/service-account.json

          echo "${{ secrets.E2E_FIREBASE_CONFIG }}" >> frontend.env

          cat frontend.env

      - name: Prepopulating the database
        run: docker compose -f ./docker-compose.test.yml --profile prestart up --exit-code-from step_populate_user

      - name: Running E2E tests
        run: docker compose -f ./docker-compose.test.yml --profile start up --exit-code-from vuevideo_e2e

      - name: Reset Firebase Test Environment
        if: always()
        run: docker compose -f ./docker-compose.test.yml --profile poststart up

      - name: Cypress Screenshots
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: |
            **/**.png
            frontend.env

      - name: Cypress Videos
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: |
            **/**.mp4

      # - name: Cache docker images
      #   working-directory: ci
      #   run: |
      #     chmod 700 save.sh
      #     ./save.sh

  build_and_push:
    needs: test
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: image_name
        name: Form proper Docker Image Name
        run: |
          DOCKER_TAG=$(echo ${{ github.ref_name }}-${{ github.sha }} | sed 's#/#-#g')
          DOCKER_IMAGE="${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/client:$DOCKER_TAG"

          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t ${{ steps.image_name.outputs.DOCKER_IMAGE }} .

      - name: Logging into Docker Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push into Docker Registry
        run: docker push ${{ steps.image_name.outputs.DOCKER_IMAGE }}
